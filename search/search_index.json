{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Replataform Wordpress - AWS","text":"<p>Status da \u00faltima build  </p> <p>Bem vindo(a) a documenta\u00e7\u00e3o do desafio final do Ignite Brasil.</p> <p>Neste documento, apresento a documenta\u00e7\u00e3o da replataforma de um site WordPress utilizando infraestrutura na  AWS , com o uso de ferramentas como o Terraform, Helm e  Ansible.</p>"},{"location":"#tldr","title":"TLDR","text":"<p>Este guia aborda a replataforma de um site WordPress, com a utiliza\u00e7\u00e3o de infraestrutura na AWS atrav\u00e9s do Terraform, instala\u00e7\u00e3o de charts com Helm e configura\u00e7\u00e3o com Ansible. Tamb\u00e9m destaca os pontos negativos associados ao uso do WordPress, como a arquitetura monol\u00edtica e desafios de seguran\u00e7a e desempenho.</p> <p>Ao adotar boas pr\u00e1ticas de desenvolvimento, otimiza\u00e7\u00e3o e seguran\u00e7a, podemos superar esses desafios e criar um ambiente WordPress moderno e eficiente.</p>"},{"location":"#ferramentas-adcionais","title":"Ferramentas Adcionais","text":"<ul> <li>AWS CLI</li> <li>Kubectl</li> </ul>"},{"location":"#pre-requisitos","title":"Pr\u00e9 requisitos","text":"<ul> <li>Chave de acesso program\u00e1tico para AWS CLI</li> </ul>"},{"location":"#o-que-e-iac","title":"O que \u00e9 IaC?","text":"<p>IaC (Infrastructure as Code), ou Infraestrutura como C\u00f3digo, \u00e9 uma abordagem que permite gerenciar e provisionar a infraestrutura do projeto por meio de c\u00f3digo, em vez de configura\u00e7\u00f5es manuais. Com IaC, \u00e9 poss\u00edvel descrever a infraestrutura desejada em arquivos de c\u00f3digo, como o Terraform, e ent\u00e3o implantar e gerenciar essa infraestrutura de forma automatizada e escal\u00e1vel.</p>"},{"location":"#etapas","title":"Etapas","text":"<ul> <li>Infraestrutura na AWS com Terraform: Utilizando a ferramenta Terraform, posso definir e provisionar a infraestrutura necess\u00e1ria na AWS de forma automatizada. Isso inclui a cria\u00e7\u00e3o de inst\u00e2ncias EC2, configura\u00e7\u00e3o de redes, balanceadores de carga, entre outros recursos.</li> <li> <p>Instala\u00e7\u00e3o de Charts com Helm: O Helm \u00e9 um gerenciador de pacotes para Kubernetes que permite instalar, atualizar e gerenciar aplica\u00e7\u00f5es de forma padronizada. No contexto da minha replataforma do WordPress, podemos utilizar o Helm para implementar os componentes necess\u00e1rios, e um bootstrap do site j\u00e1 com banco de dados.</p> </li> <li> <p>Configura\u00e7\u00e3o com Ansible: O Ansible \u00e9 uma ferramenta de automa\u00e7\u00e3o que me permite configurar e gerenciar a infraestrutura de forma declarativa. Com o Ansible, \u00e9 poss\u00edvel definir as configura\u00e7\u00f5es desejadas para o ambiente do WordPress, como ajustes de seguran\u00e7a, configura\u00e7\u00e3o do servidor web, instala\u00e7\u00e3o de plugins e temas, entre outros.</p> </li> </ul>"},{"location":"#layout-do-projeto","title":"Layout do projeto","text":"<p>Abaixo est\u00e1 a arquiterura geral:</p>"},{"location":"#pontos-positivos","title":"Pontos Positivos","text":"<p>F\u00e1cil de usar e personalizar: O WordPress \u00e9 conhecido por sua interface intuitiva e amig\u00e1vel, tornando-o acess\u00edvel para usu\u00e1rios iniciantes e experientes. Com um editor de arrastar e soltar (Gutenberg) e uma vasta biblioteca de temas e plugins, voc\u00ea pode personalizar facilmente a apar\u00eancia e as funcionalidades do seu site sem precisar de habilidades avan\u00e7adas de desenvolvimento.</p> <p>Comunidade e suporte: O WordPress possui uma comunidade enorme e ativa de desenvolvedores, designers e usu\u00e1rios. Isso significa que voc\u00ea pode encontrar facilmente solu\u00e7\u00f5es para problemas, obter dicas \u00fateis e at\u00e9 mesmo ter acesso a um vasto n\u00famero de recursos gratuitos, como temas, plugins e tutoriais.</p> <p>SEO-friendly: O WordPress foi criado com o foco em otimiza\u00e7\u00e3o para mecanismos de busca (SEO). Ele oferece v\u00e1rias op\u00e7\u00f5es e plugins para melhorar o desempenho do seu site nos resultados de pesquisa, como a cria\u00e7\u00e3o de URLs amig\u00e1veis, otimiza\u00e7\u00e3o de t\u00edtulos e meta descri\u00e7\u00f5es, integra\u00e7\u00e3o com ferramentas de an\u00e1lise e muito mais.</p> <p>Flexibilidade e escalabilidade: O WordPress \u00e9 altamente flex\u00edvel e pode ser usado para criar diversos tipos de sites, desde blogs pessoais e sites de pequenas empresas at\u00e9 grandes portais de not\u00edcias e lojas online. Sua estrutura modular permite que voc\u00ea adicione novas funcionalidades \u00e0 medida que seu site cresce, tornando-o escal\u00e1vel para acompanhar suas necessidades em expans\u00e3o.</p>"},{"location":"#pontos-negativos","title":"Pontos Negativos","text":"<p>Embora o WordPress seja uma plataforma popular e amplamente utilizada para a cria\u00e7\u00e3o de sites, \u00e9 importante estar ciente de alguns pontos negativos associados ao seu uso, especialmente ao \"replataform\u00e1-lo\" em um ambiente mais moderno:</p> <ul> <li> <p>Arquitetura Monol\u00edtica: O WordPress foi projetado como uma aplica\u00e7\u00e3o monol\u00edtica, o que significa que todos os componentes, como o servidor web, banco de dados e plugins, est\u00e3o fortemente acoplados. Isso pode dificultar a escalabilidade e flexibilidade da aplica\u00e7\u00e3o em ambientes mais complexos.</p> </li> <li> <p>Seguran\u00e7a: Devido \u00e0 sua popularidade, o WordPress \u00e9 frequentemente alvo de ataques cibern\u00e9ticos. \u00c9 essencial tomar medidas adicionais para fortalecer a seguran\u00e7a do ambiente, como a aplica\u00e7\u00e3o de atualiza\u00e7\u00f5es de seguran\u00e7a, configura\u00e7\u00f5es adequadas e uso de plugins confi\u00e1veis.</p> </li> <li> <p>Desempenho: Sites WordPress mal otimizados podem sofrer com problemas de desempenho, como tempos de carregamento lentos. \u00c9 fundamental adotar boas pr\u00e1ticas de otimiza\u00e7\u00e3o, como o uso de cache, compacta\u00e7\u00e3o de recursos e otimiza\u00e7\u00e3o de consultas ao banco de dados, para garantir um desempenho adequado.</p> </li> <li> <p>Depend\u00eancia de Plugins: O WordPress \u00e9 conhecido por sua vasta biblioteca de plugins, que adicionam funcionalidades extras ao site. No entanto, o uso excessivo de plugins pode tornar o ambiente mais complexo e aumentar o risco de incompatibilidades, vulnerabilidades de seguran\u00e7a e problemas de desempenho.</p> </li> </ul>"},{"location":"guide/config/","title":"Instala\u00e7\u00e3o e Configura\u00e7\u00e3o com Ansible","text":"<p>Nesta etapa, faremos as instala\u00e7\u00f5es usando Ansible, que executa os comandos de Helm e faz algumas configura\u00e7\u00f5es   como a do ingress controller. Os charts s\u00e3o instalados com o tipo do servi\u00e7o como NodePort   para que o Load Balancer Controller crie o Ingress e o Application Load Balancer.</p> <p>Para executar as playbooks \u00e9 preciso \"apontar\" os comandos para o cluster EKS usando a AWS CLI:</p>"},{"location":"guide/config/#comando-aws-cli","title":"Comando AWS CLI","text":"<ul> <li><code>aws eks --region</code> sua_regiao <code>update-kubeconfig --name</code> seu_cluster - Atualiza o contexto do kube config.</li> </ul>"},{"location":"guide/config/#wordpress","title":"Wordpress","text":"<p>Nessa playbook o Ansible executa os comandos de Helm que instalam o \"pacote\" do Wordpress e MariaDB j\u00e1 configurados.</p> wordpress.yaml<pre><code>---\n- name: Install and config wordpress\nhosts: localhost\ntasks:\n- name: Add bitnami repo\nshell: \"helm repo add bitnami https://charts.bitnami.com/bitnami\"\n- name: Update repo\nshell: \"helm repo update\"\n- name: Deploy latest version of wordpress chart inside ingress namespace (and create it)\nshell: \"helm upgrade --install wordpress oci://registry-1.docker.io/bitnamicharts/wordpress -n wordpress --set service.type=NodePort --create-namespace\"\n# environment:\n#   KUBECONFIG: /root/.kube/config\n- name: Apply ingress rules with kubectl (on wordpress app namespace)\ncommand: kubectl apply -f alb-wordpress.yaml\n</code></pre>"},{"location":"guide/config/#alb","title":"ALB \ud83d\udd12","text":"alb-wordpress.yaml<pre><code>---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: wordpress-ingress\nnamespace: wordpress\nannotations:\nalb.ingress.kubernetes.io/certificate-arn: arn:aws:acm::certificate # - your certificate ARN\nalb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\":443}]'\nalb.ingress.kubernetes.io/ssl-redirect: '443'\nalb.ingress.kubernetes.io/scheme: internet-facing\nspec:\ningressClassName: alb\nrules:\n- host: wp.ignitehome.online\nhttp:\npaths:\n- path: /admin\npathType: Exact\nbackend:\nservice:\nname: wordpress\nport:\nnumber: 80\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: wordpress\nport:\nnumber: 80\n</code></pre>"},{"location":"guide/config/#prometheus","title":"Prometheus","text":"prometheus.yaml<pre><code>---\n- name: Install and config wordpress\nhosts: localhost\ntasks:\n- name: Add prometheus repo\nshell: \"helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\"\n- name: Update repo\nshell: \"helm repo update\"\n- name: Deploy latest version of prometheus chart inside ingress namespace (and create it)\nshell: \"helm upgrade --install prometheus prometheus-community/prometheus -n prometheus --create-namespace\"\nenvironment:\nKUBECONFIG: /root/.kube/config\n</code></pre>"},{"location":"guide/config/#grafana","title":"Grafana","text":"grafana.yaml<pre><code>---\n- name: Install and config wordpress\nhosts: localhost\ntasks:\n- name: Add grafana repo\nshell: \"helm repo add grafana https://grafana.github.io/helm-charts\"\n- name: Update repo\nshell: \"helm repo update\"\n- name: Deploy latest version of grafana chart inside ingress namespace (and create it)\nshell: \"helm upgrade --install grafana grafana/grafana  --create-namespace -n grafana --set persistence.enabled=true --set adminPassword='EKS123' --values https://raw.githubusercontent.com/AndrewVictorSilva/apoioprojetofinal/main/grafana-data-source.yaml  --set service.type=NodePort\"\nenvironment:\nKUBECONFIG: /root/.kube/config\n- name: Apply ingress rules with kubectl (on wordpress app namespace)\ncommand: kubectl apply -f alb-grafana.yaml\n</code></pre>"},{"location":"guide/config/#grafana-alb","title":"Grafana ALB \ud83d\udd12","text":"alb-grafana.yaml<pre><code>---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: grafana-ingress\nnamespace: grafana\nannotations:\nalb.ingress.kubernetes.io/certificate-arn: arn:aws:acm::certificate # - your certificate ARN\nalb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\":443}]'\nalb.ingress.kubernetes.io/ssl-redirect: '443'\nalb.ingress.kubernetes.io/scheme: internet-facing\nspec:\ningressClassName: alb\nrules:\n- host: gf.ignitehome.online\nhttp:\npaths:\n- path: /login\npathType: Exact\nbackend:\nservice:\nname: grafana\nport:\nnumber: 80\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: grafana\nport:\nnumber: 80\n</code></pre>"},{"location":"guide/infra/","title":"Infraestrutura com Terraform","text":"<p>Bem-vindo \u00e0 se\u00e7\u00e3o de cria\u00e7\u00e3o da infraestrutura virtual na AWS com Terraform do nosso guia.</p> <p>Nesta se\u00e7\u00e3o, abordaremos passo a passo como configurar a infraestrutura necess\u00e1ria para o nosso cluster EKS (Elastic Kubernetes Service). </p> <p>A infraestrutura que iremos criar envolve elementos cruciais, incluindo:</p> <ul> <li>VPC (Virtual Private Cloud)</li> <li>Subnets</li> <li>Tabelas de roteamento</li> <li>NAT gateways</li> <li>Cluster EKS</li> <li>N\u00f3s de computa\u00e7\u00e3o (compute nodes)</li> <li>Addons de rede, como CNI (Container Network Interface), Kube Proxy, EBS CSI Driver e CoreDNS</li> </ul> <p>Com a utiliza\u00e7\u00e3o do Terraform, uma poderosa ferramenta de infraestrutura como c\u00f3digo, seremos capazes de provisionar toda essa infraestrutura de forma automatizada e repet\u00edvel. Isso nos permitir\u00e1 criar e gerenciar nosso ambiente de maneira eficiente e escal\u00e1vel.</p> <p>Ao final desta se\u00e7\u00e3o, voc\u00ea ter\u00e1 uma infraestrutura s\u00f3lida e pronta para implantar e executar aplicativos em cont\u00eaineres no nosso cluster EKS.</p>"},{"location":"guide/infra/#virtual-private-cloud-vpc","title":"Virtual Private Cloud (VPC)","text":"vpc.tf<pre><code> provider \"aws\"{\nregion = \"regi\u00e3o\"\n}\nterraform {\nrequired_providers {\naws = {\nsource  = \"hashicorp/aws\"\nversion = \"~&gt; 3.0\"\n}\n}\n}\nresource \"aws_vpc\" \"main\" {\ncidr_block           = \"10.0.0.0/16\"\ninstance_tenancy     = \"default\"\nenable_dns_hostnames = true\ntags = {\n\"Name\" = \"main\"\n}\n}\nterraform {\nbackend \"s3\" {\nbucket  = \"bucket_name\"\nkey     = \"folder/terraform.tfstate\"\nregion  = \"region\"\nprofile = \"profile_name\"\n}\n}\n</code></pre>"},{"location":"guide/infra/#internet-gateway","title":"Internet Gateway","text":"igw.tf<pre><code>    resource \"aws_internet_gateway\" \"igw\" {\nvpc_id = aws_vpc.main.id\ntags = {\nName = \"igw\"\n}\n}\n</code></pre>"},{"location":"guide/infra/#range-de-ips","title":"Range de IP's","text":"Subnet CIDR Endere\u00e7os Dispon\u00edveis private-us-east-1a 10.0.0.0/19 8190 private-us-east-1b 10.0.32.0/19 8190 public-us-east-1a 10.0.64.0/19 8190 public-us-east-1b 10.0.96.0/19 8190"},{"location":"guide/infra/#subnets","title":"Subnets","text":"subnets.tf<pre><code>resource \"aws_subnet\" \"private-us-east-1a\" {\nvpc_id            = aws_vpc.main.id\ncidr_block        = \"10.0.0.0/19\"\navailability_zone = \"us-east-1a\"\ntags = {\n\"Name\"                            = \"private-us-east-1a\"\n\"kubernetes.io/role/internal-elb\" = \"1\"\n\"kubernetes.io/cluster/demo\"      = \"shared\"\n}\n}\nresource \"aws_subnet\" \"private-us-east-1b\" {\nvpc_id            = aws_vpc.main.id\ncidr_block        = \"10.0.32.0/19\"\navailability_zone = \"us-east-1b\"\ntags = {\n\"Name\"                            = \"private-us-east-1b\"\n\"kubernetes.io/role/internal-elb\" = \"1\"\n\"kubernetes.io/cluster/demo\"      = \"shared\"\n}\n}\nresource \"aws_subnet\" \"public-us-east-1a\" {\nvpc_id                  = aws_vpc.main.id\ncidr_block              = \"10.0.64.0/19\"\navailability_zone       = \"us-east-1a\"\nmap_public_ip_on_launch = true\ntags = {\n\"Name\"                       = \"public-us-east-1a\"\n\"kubernetes.io/role/elb\"     = \"1\"\n\"kubernetes.io/cluster/demo\" = \"shared\"\n}\n}\nresource \"aws_subnet\" \"public-us-east-1b\" {\nvpc_id                  = aws_vpc.main.id\ncidr_block              = \"10.0.96.0/19\"\navailability_zone       = \"us-east-1b\"\nmap_public_ip_on_launch = true\ntags = {\n\"Name\"                       = \"public-us-east-1b\"\n\"kubernetes.io/role/elb\"     = \"1\"\n\"kubernetes.io/cluster/demo\" = \"shared\"\n}\n}\n</code></pre>"},{"location":"guide/infra/#nat-gateway","title":"NAT Gateway","text":"nat.tf<pre><code>resource \"aws_eip\" \"nat\" {\nvpc = true\ntags = {\nName = \"nat\"\n}\n}\nresource \"aws_nat_gateway\" \"nat\" {\nallocation_id = aws_eip.nat.id\nsubnet_id     = aws_subnet.public-us-east-1a.id\ntags = {\nName = \"nat\"\n}\ndepends_on = [aws_internet_gateway.igw]\n}\n</code></pre>"},{"location":"guide/infra/#routes-route-table","title":"Routes (Route Table)","text":"routes.tf<pre><code>resource \"aws_route_table\" \"private\" {\nvpc_id = aws_vpc.main.id\nroute = [\n{\ncidr_block                 = \"0.0.0.0/0\"\nnat_gateway_id             = aws_nat_gateway.nat.id\ncarrier_gateway_id         = \"\"\ndestination_prefix_list_id = \"\"\negress_only_gateway_id     = \"\"\ngateway_id                 = \"\"\ninstance_id                = \"\"\nipv6_cidr_block            = \"\"\nlocal_gateway_id           = \"\"\nnetwork_interface_id       = \"\"\ntransit_gateway_id         = \"\"\nvpc_endpoint_id            = \"\"\nvpc_peering_connection_id  = \"\"\ncore_network_arn           = \"\"\n},\n]\ntags = {\nName = \"private\"\n}\n}\nresource \"aws_route_table\" \"public\" {\nvpc_id = aws_vpc.main.id\nroute = [\n{\ncidr_block                 = \"0.0.0.0/0\"\ngateway_id                 = aws_internet_gateway.igw.id\nnat_gateway_id             = \"\"\ncarrier_gateway_id         = \"\"\ndestination_prefix_list_id = \"\"\negress_only_gateway_id     = \"\"\ninstance_id                = \"\"\nipv6_cidr_block            = \"\"\nlocal_gateway_id           = \"\"\nnetwork_interface_id       = \"\"\ntransit_gateway_id         = \"\"\nvpc_endpoint_id            = \"\"\nvpc_peering_connection_id  = \"\"\ncore_network_arn           = \"\"\n},\n]\ntags = {\nName = \"public\"\n}\n}\nresource \"aws_route_table_association\" \"private-us-east-1a\" {\nsubnet_id      = aws_subnet.private-us-east-1a.id\nroute_table_id = aws_route_table.private.id\n}\nresource \"aws_route_table_association\" \"private-us-east-1b\" {\nsubnet_id      = aws_subnet.private-us-east-1b.id\nroute_table_id = aws_route_table.private.id\n}\nresource \"aws_route_table_association\" \"public-us-east-1a\" {\nsubnet_id      = aws_subnet.public-us-east-1a.id\nroute_table_id = aws_route_table.public.id\n}\nresource \"aws_route_table_association\" \"public-us-east-1b\" {\nsubnet_id      = aws_subnet.public-us-east-1b.id\nroute_table_id = aws_route_table.public.id\n}\n</code></pre>"},{"location":"guide/infra/#elastic-kubernets-service-eks","title":"Elastic Kubernets Service (EKS)","text":"eks.tf<pre><code>resource \"aws_iam_role\" \"demo\" {\nname = \"eks-cluster-demo\"\nassume_role_policy = &lt;&lt;POLICY\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"eks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\nPOLICY\n}\nresource \"aws_iam_role_policy_attachment\" \"demo-AmazonEKSClusterPolicy\" {\nfor_each = toset([\n\"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\",\n\"arn:aws:iam::aws:policy/AmazonEKSServicePolicy\",\n])\nrole       = aws_iam_role.demo.name\npolicy_arn = each.value\n}\nresource \"aws_eks_cluster\" \"demo\" {\nname     = \"demo\"\nrole_arn = aws_iam_role.demo.arn\nvpc_config {\nsubnet_ids = [\naws_subnet.private-us-east-1a.id,\naws_subnet.private-us-east-1b.id,\n]\n}\ndepends_on = [\naws_iam_role_policy_attachment.demo-AmazonEKSClusterPolicy,\n]\n}\n</code></pre>"},{"location":"guide/infra/#cluster-nodes","title":"Cluster Nodes","text":"nodes.tf<pre><code>resource \"aws_iam_role\" \"nodes\" {\nname = \"eks-node-group-nodes\"\nassume_role_policy = jsonencode({\nStatement = [{\nAction = \"sts:AssumeRole\"\nEffect = \"Allow\"\nPrincipal = {\nService = \"ec2.amazonaws.com\"\n}\n}]\nVersion = \"2012-10-17\"\n})\n}\nresource \"aws_iam_role_policy_attachment\" \"nodes-AmazonEKSWorkerNodePolicy\" {\npolicy_arn = \"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\nrole       = aws_iam_role.nodes.name\n}\nresource \"aws_iam_role_policy_attachment\" \"nodes-AmazonEKS_CNI_Policy\" {\npolicy_arn = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\nrole       = aws_iam_role.nodes.name\n}\nresource \"aws_iam_role_policy_attachment\" \"nodes-AmazonEC2ContainerRegistryReadOnly\" {\npolicy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\"\nrole       = aws_iam_role.nodes.name\n}\nresource \"aws_eks_node_group\" \"private-nodes\" {\ncluster_name    = aws_eks_cluster.demo.name\nnode_group_name = \"private-nodes\"\nnode_role_arn   = aws_iam_role.nodes.arn\nsubnet_ids = [\naws_subnet.private-us-east-1a.id,\naws_subnet.private-us-east-1b.id\n]\ncapacity_type  = \"ON_DEMAND\"\ninstance_types = [\"t3.medium\"]\nscaling_config {\ndesired_size = 2\nmax_size     = 3\nmin_size     = 1\n}\nupdate_config {\nmax_unavailable = 1\n}\nlabels = {\nrole = \"general\"\n}\ntags = {\n\"kubernetes.io/cluster/demo\" = \"shared\"\n}\ndepends_on = [\naws_iam_role_policy_attachment.nodes-AmazonEKSWorkerNodePolicy,\naws_iam_role_policy_attachment.nodes-AmazonEKS_CNI_Policy,\naws_iam_role_policy_attachment.nodes-AmazonEC2ContainerRegistryReadOnly,\naws_eks_addon.kube-proxy,\naws_eks_addon.vpc-cni,\n]\n}\n</code></pre>"},{"location":"guide/infra/#addons","title":"Addons","text":"addons.tf<pre><code>resource \"aws_eks_addon\" \"vpc-cni\" {\ncluster_name = aws_eks_cluster.demo.name\naddon_name   = \"vpc-cni\"\n}\nresource \"aws_eks_addon\" \"kube-proxy\" {\ncluster_name = aws_eks_cluster.demo.name\naddon_name   = \"kube-proxy\"\n}\nresource \"aws_eks_addon\" \"aws-ebs-csi-driver\" {\ncluster_name             = aws_eks_cluster.demo.name\naddon_name               = \"aws-ebs-csi-driver\"\ndepends_on               = [aws_eks_node_group.private-nodes]\nservice_account_role_arn = aws_iam_role.AmazonEKS_EBS_CSI_DriverRole.arn\n}\nresource \"aws_eks_addon\" \"coredns\" {\ncluster_name = aws_eks_cluster.demo.name\naddon_name   = \"coredns\"\ndepends_on   = [aws_eks_node_group.private-nodes]\n}\n</code></pre>"},{"location":"guide/infra/#roles-authorization","title":"Roles/ Authorization","text":"oidc.tf<pre><code>resource \"aws_iam_openid_connect_provider\" \"demo\" {\nclient_id_list  = [\"sts.amazonaws.com\"]\nthumbprint_list = data.tls_certificate.thumb.certificates[*].sha1_fingerprint\nurl             = aws_eks_cluster.demo.identity.0.oidc.0.issuer\n}\ndata \"tls_certificate\" \"thumb\" {\nurl = aws_eks_cluster.demo.identity[0].oidc[0].issuer\n}\ndata \"aws_iam_policy_document\" \"aws-ebs-csi-driver-trust-policy\" {\nstatement {\nactions = [\"sts:AssumeRoleWithWebIdentity\"]\neffect  = \"Allow\"\ncondition {\ntest     = \"StringEquals\"\nvariable = \"${replace(aws_iam_openid_connect_provider.demo.url, \"https://\", \"\")}:aud\"\nvalues   = [\"sts.amazonaws.com\"]\n}\ncondition {\ntest     = \"StringEquals\"\nvariable = \"${replace(aws_iam_openid_connect_provider.demo.url, \"https://\", \"\")}:sub\"\nvalues   = [\"system:serviceaccount:kube-system:ebs-csi-controller-sa\"]\n}\nprincipals {\nidentifiers = [\"${aws_iam_openid_connect_provider.demo.arn}\"]\ntype        = \"Federated\"\n}\n}\n}\nresource \"aws_iam_role\" \"AmazonEKS_EBS_CSI_DriverRole\" {\nassume_role_policy = data.aws_iam_policy_document.aws-ebs-csi-driver-trust-policy.json\nname               = \"AmazonEKS_EBS_CSI_DriverRole\"\n}\nresource \"aws_iam_role_policy_attachment\" \"ebs_csi_controller_policy\" {\npolicy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy\"\nrole       = aws_iam_role.AmazonEKS_EBS_CSI_DriverRole.name\n}\n</code></pre>"},{"location":"guide/infra/#load-balancer-controller","title":"Load Balancer Controller","text":"<p>Aqui est\u00e1 um examplo de que o Terraform pode ser usado para executar o charts de Helm. Criamos o chart usando as permiss\u00f5esc criadas anteriormente e dinamicamente alocamos \"trust relationship\" na role que ser\u00e1 usada na service account.</p> helm.tf<pre><code>provider \"helm\" {\nkubernetes {\nhost                   = aws_eks_cluster.demo.endpoint\ncluster_ca_certificate = base64decode(aws_eks_cluster.demo.certificate_authority[0].data)\nexec {\napi_version = \"client.authentication.k8s.io/v1beta1\"\nargs        = [\"eks\", \"get-token\", \"--cluster-name\", aws_eks_cluster.demo.id]\ncommand     = \"aws\"\n}\n}\n}\nresource \"helm_release\" \"aws-load-balancer-controller2\" {\nname = \"aws-load-balancer-controller\"\nrepository = \"https://aws.github.io/eks-charts\"\nchart      = \"aws-load-balancer-controller\"\nnamespace  = \"kube-system\"\nversion    = \"1.5.4\"\nset {\nname  = \"clusterName\"\nvalue = aws_eks_cluster.demo.id\n}\nset {\nname  = \"image.tag\"\nvalue = \"v2.5.3\"\n}\nset {\nname  = \"serviceAccount.name\"\nvalue = \"aws-load-balancer-controller\"\n}\nset {\nname  = \"serviceAccount.annotations.eks\\\\.amazonaws\\\\.com/role-arn\"\nvalue = aws_iam_role.aws_load_balancer_controller.arn\n}\ndepends_on = [\naws_eks_node_group.private-nodes,\naws_iam_role_policy_attachment.aws_load_balancer_controller_attach\n]\n}\n</code></pre>"},{"location":"guide/route53/","title":"Acessando a aplica\u00e7\u00f5es","text":""},{"location":"guide/route53/#endereco-dos-albs","title":"Endere\u00e7o dos ALB's","text":"<p>Podemos obter essa informa\u00e7\u00e3o no Console mas tamb\u00e9m podemos executar o comando abaixo:</p> <ul> <li><code>kubectl get ing -A</code>   - pega os endere\u00e7os de ingress de todos os namespaces.</li> </ul>"},{"location":"guide/route53/#acessando-o-site","title":"Acessando o site","text":"<p>Nos arquivos de cria\u00e7\u00e3o dos ALB's, n\u00f3s configuramos os hosts como wp.ignitehome.online e gf.ignitehome.online. Esse dom\u00ednio foi comprado e criada uma hosted zone na AWS para que ao acessarmos os hosts/dom\u00ednios, o DNS aponte para os endere\u00e7os dos ALB's.</p> <p> </p> Adicionando o registro da rota no Route 53"},{"location":"pipeline/codebuild/","title":"Codebuild","text":"<p>Primeiro passo \u00e9 criar um projeto de build no console AWS e usar as especifi\u00e7\u00e3o: </p>"},{"location":"pipeline/codebuild/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"Environment variables AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION PROFILE_NAME"},{"location":"pipeline/codebuild/#buildspec","title":"Buildspec","text":"<p>Muito importante passar o caminho correto do arquivo \ud83d\udc47\ud83c\udffb!</p> <p><code>~/buildspec.yaml</code></p>"},{"location":"pipeline/codebuild/#exameplo","title":"Exameplo","text":"buildspec.yaml<pre><code>version: 0.2\nphases:\ninstall:\nruntime-versions:\npython: 3.x\npre_build:\ncommands:\n- sudo yum -y install python3-pip\n- sudo pip3 install ansible\n- sudo pip3 install jmespath\n- curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n- chmod 700 get_helm.sh\n- ./get_helm.sh\n- cd cicd\n- chmod +x install-terraform.sh apply-terraform.sh configure-named-profile.sh install-kubectl.sh\n- ./install-terraform.sh\n- ./configure-named-profile.sh\n- ./install-kubectl.sh\nbuild:\ncommands:\n- ./apply-terraform.sh\n- cd ..\n- aws eks --region us-east-1 update-kubeconfig --name demo\n- pwd\n- cd config\n- ansible-playbook ./1-wordpress.yaml\n- ansible-playbook ./3-prometheus.yaml\n- ansible-playbook ./4-grafana.yaml\n</code></pre>"},{"location":"pipeline/codebuild/#codebuild-source","title":"CodeBuild Source","text":"<p>Indicar o reposit\u00f3rio que ser\u00e1 a fonte do c\u00f3digo que ser\u00e1 utilizado.</p> <p> </p>"}]}